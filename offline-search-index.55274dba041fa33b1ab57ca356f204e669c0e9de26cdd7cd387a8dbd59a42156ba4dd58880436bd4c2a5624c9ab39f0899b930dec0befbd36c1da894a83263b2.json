[{"body":"Init system The Micro and MicroServer ISO flavors are using runit as init system. For ease of use, a very simple helper is provided, and can be used as follows:\nList available services 1  $ runit-list   Start a service 1  $ runit-start sshd   Stop a service 1  $ runit-stop sshd   Enable a service on boot 1  $ runit-enable sshd   Disable a service from booting on startup 1  $ runit-disable sshd   Boot scripts It’s possible to add scripts to be executed during boot execution, under /etc/runit/core-services/*.sh.\nFor example:\n1  $ echo \"modprobe e1000e\" \u003e /etc/runit/core-services/modules.sh   Yip Integration Mocaccino Micro can be configured to execute yipfiles during different stages.\n1  $ luet install runit-srv/yip   To start the yip service:\n1  $ runit-start yip   To Enable yip on boot:\n1  $ runit-enable yip   Yip files running periodically The yip service runs periodically yip files in /etc/yip.d, /etc/yip.yaml and from the boot cmdline on the system.\nFor example, by creating a yip file as /etc/yip.d/sshd.yaml:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  name:\"sshd\"stages:reconcile:- name:\"sshd_config setup\"commands:- chmod644/etc/ssh/sshd_configfiles:- path:\"/etc/ssh/sshd_config\"owner:0group:0permission:644content:| AuthorizedKeysFile %h/.ssh/authorized_keysPermitRootLoginyesListenAddress0.0.0.0  yip will make sure and keep sshd configured.\nThere are two stages currently supported: reconcile and boot. The boot yip stage is run at start, during runit initialization, while the reconcile is called periodically. You can also run yip-reconcile to trigger the execution manually.\nFor more information about yip, check here. To see a sample /etc/yip.d control-repo check here.\nSpecifing yip files from boot It is also possible to use yip to automatically configure the system from boot.\nAdd yip=... to the boot command lines to specify the yip file to execute across the stages (can be a path to a local file, or either a URL)\nExamples  yipcontrol-sample  ","excerpt":"Init system The Micro and MicroServer ISO flavors are using runit as …","ref":"/docs/micro/service-management/","title":"Service Management and Init"},{"body":"Installation At the moment Micro images are tested to be bootable with Virtualbox, and can be installed in VMs.\nTo install Micro on a virtual machine, run mocaccino-unattended-installer.\nDefault username The default account is root with password mocaccino\nSSH Access add PermitRootLogin yes to /etc/ssh/sshd_config with your editor of choice ( for nano, luet install editors/nano )\nStart the sshd daemon:\n1  $ runit-start sshd   You should be able to log-in to your machine, check the ip with ip a.\nTo enable sshd on boot,\n1  $ runit-enable sshd   Once logged in, remind to change the configuration settings!\n","excerpt":"Installation At the moment Micro images are tested to be bootable with …","ref":"/docs/micro/installation/","title":"Installation notes"},{"body":"Switching kernels Micro and MicroServer images are shipping the latest available Kernel version. It is possible to switch kernels by running luet kernel-switcher.\nkernel-switcher is a luet extension, and is shipped by system/luet-extensions.\nSwitch to LTS kernels To switch to LTS kernels, run:\n1  $ luet kernel-switcher kernel/mocaccino-lts-full   Switch to main kernels To switch to main kernels, that gets updated more frequently:\n1  $ luet kernel-switcher kernel/mocaccino-full   ","excerpt":"Switching kernels Micro and MicroServer images are shipping the latest …","ref":"/docs/micro/kernels/","title":"Switching kernels"},{"body":" Warning This is currently experimental  In Micro, currently it’s possible to build packages with K3s and Luet\nFirst install k3s:\n1  luet install -y container/k3s runit-srv/k3s   And start it:\n1  $ runit-start k3s   To enable it permanently on boot, run runit-enable k3s\nWait for k3s to be ready (Until ContainerCreating becomes Ready):\n1  $ watch k3s kubectl get pods -A   Now install the luet controller:\n1  $ k3s kubectl apply -f https://raw.githubusercontent.com/mudler/luet-k8s/master/hack/kube.yaml   And wait for it to be ready:\n1  $ watch k3s kubectl get pods -A   Once all is up, we are ready to build packages, try for example with:\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ cat \u003c\u003cEOF | k3s kubectl apply -f - apiVersion: luet.k8s.io/v1alpha1 kind: PackageBuild metadata: name: test spec: packageName: container/img repository: url: \"https://github.com/mocaccinoOS/mocaccino-extra\" options: pull: true imageRepository: \"quay.io/mocaccinocache/extra-amd64-cache\" EOF   In this case, we can inspect the build logs with:\n1  k3s kubectl logs -f test   Example  Full package build example  ","excerpt":" Warning This is currently experimental  In Micro, currently it’s …","ref":"/docs/micro/building-packages/","title":"Building packages with Micro and k3s"},{"body":"Setup First install container/docker, or directly runit-srv/docker, which provides the runit service:\n1  $ luet install runit-srv/dockerd   To start dockerd, just:\n1  $ runit-start dockerd   or to enable at boot:\n1  $ runit-enable dockerd   Now you should be able to use docker as usual, for example:\n1 2 3 4 5 6 7  root@mocaccino:~# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES root@mocaccino:~# docker images REPOSITORY TAG IMAGE ID CREATED SIZE quay.io/mocaccino/extra latest ce197d5b1a7e 3 days ago 21.2MB   ","excerpt":"Setup First install container/docker, or directly runit-srv/docker, …","ref":"/docs/micro/docker/","title":"Running docker"},{"body":"Setup Wireguard comes embedded in the Mocaccino Kernels.\nFirst install wireguard-tools and the wg runit service:\n1  $ luet install runit-srv/wg networking/wireguard-tools   By default, the service sets up the wg0 interface, with configuration at /etc/wireguard/wg0.conf.\nEdit /etc/wireguard/wg0.conf with your configuration, or to change the default interface configuration, change the /etc/sv/wg/conf file accordingly.\nTo start wg, just:\n1  $ runit-start wg   or to enable at boot:\n1  $ runit-enable wg   Now you should be able to see the wg interface with wg show.\nMultiple connections For multiple connections, copy the /etc/sv/wg/ service directory to your custom one, for example /etc/sv/wg2 and tweak it accordingly to your needs. You can start it afterwards with runit-start wg2\n","excerpt":"Setup Wireguard comes embedded in the Mocaccino Kernels.\nFirst install …","ref":"/docs/micro/wireguard/","title":"Running wireguard"},{"body":" Warning Mocaccino and Luet are under active development and should not be considered “production ready” at this time. The following steps should only be carried out on test systems. Do make sure you have any important data backed up before.  Mocaccino Micro is a musl-based LFS distribution with a minimal set of packages in order to boot and build an entire OS.\nAt the moment are available alpha ISO releases, and the following docker images can be used:\n1  $ docker pull quay.io/mocaccino/micro   Extra repositories Additional packages are available in the mocaccino-extra repositories.\nTo enable them:\n1  $ luet install repository/mocaccino-extra   ","excerpt":" Warning Mocaccino and Luet are under active development and should …","ref":"/docs/micro/","title":"Mocaccino Micro"},{"body":" Warning MocaccinoOS and this wiki is a work in progress, please help us improve by opening a PR or filing an issue.\nMocaccino and Luet are under active development and should not be considered “production ready” at this time. The steps described in the article are for development only and should only be carried out on test systems.\n Welcome to the MocaccinoOS wiki!\nMocaccinoOS is a minimal meta-Linux Distribution. It uses Luet as Package Manager which is static and uses containers to build packages.\nMain features of MocaccinoOS:\n Focused on minimalism, small foot print and ease of use Native Vanilla upstream kernel: We follow closely kernel versions from upstream, lts included. Unique approach to Package Management: SAT solving applied also on package build in containers (docker, Kubernetes, … ) Meta distribution: It can be easily used to bootstrap other OS or spin-offs Local iteration: With the container ecosystem, it’s easy to iterate development locally Cloud first: support for the most important cloud technology in the landscape Different variants: from Server to Desktop, from systemd to runit!  Here you will find Installations, articles and how-tos for the MocaccinoOS variants\n","excerpt":" Warning MocaccinoOS and this wiki is a work in progress, please help …","ref":"/docs/","title":"Documentation"},{"body":"Mocaccino Desktop is a Gentoo-based distribution (derived from Sabayon) oriented towards Desktop systems.\nIt contains installable “apps” that we refer internally as “layers” to install common suite of packages needed to bootstrap a pure and simple OS.\nA User, should be able then to install KDE by calling luet install layers/KDE and nothing else. That package should bring all the necessary components to make the “app” work as expected. The user shouldn’t be exposed to the typical OS architecture of bringing with it dozens of dependencies.\nThink at it like Android apps: Install and uninstall should be as simple as that.\nThis approach is completely different from Mocaccino Micro, which is a LFS and all packages are compiled 1:1.\nIn this repository, updates are OTA-alike, with less friction as possible.\nWhy MOS Desktop is different? For the user, MOS Desktop is a pure and simple OS. We target to deliver an unique approach on package installation and upgrades. Applications should bundle all the required dependencies in order to run, or alternatively share common layers that are used between them (for example think about MATE, GNOME, and all software that depends on GTK). This allows users to have OTA-alike updates, without having to struggle with all packages dependencies.\nFrom a developer standpoint, MOS takes a unique approach on package building, allowing developers to iterate locally changes to the packages very easily, thanks to the Luet flexible backend approach. You can use Docker to build packages locally, or Kubernetes to build them in your cluster\nDownload At the moment are available alpha ISO releases.\nDevelopment Documentation  Ops guide Luet docs  Migrating from Sabayon systems Warning Mocaccino and Luet are under active development and should not be considered “production ready” at this time. The following steps should only be carried out on test systems. Do make sure you have any important data backed up before starting a migration.  You can convert a Sabayon system (running Entropy) to Mocaccino OS (running luet) with the following commands as root\n1 2 3  curl https://get.mocaccino.org/luet/get_luet_root.sh | sh luet install system/luet-migrate-entropy luet migrate-entropy   Migrations have been checked for systems running Sabayon 18.05 and newer. You can check which version of Sabayon you are running with cat /etc/sabayon-release.\nEnabling the Portage Tree layer Once converted to Mocaccino OS, you will want to enable the Mocaccino Repositories\n1 2 3  luet install repository/mocaccino-os-commons luet install repository/mocaccino-desktop-stable luet install repository/mocaccino-extra-stable   Upgrading to the latest packages Install all available newer packages from the Mocaccino repositories using:\n1  luet upgrade   And finally, review and merge any changes to your configuration files:\n1  etc-update   Remove cached downloads If you wish to reclaim the disk space used by the upgrade process (downloaded packages and cached metadata), you can do so using:\n1  luet cleanup   ","excerpt":"Mocaccino Desktop is a Gentoo-based distribution (derived from …","ref":"/docs/desktop/","title":"Mocaccino Desktop"},{"body":"MocaccinoOS Desktop supports flatpak, and it’s usage is encouraged for packages like Firefox, LibreOffice, …\nTo install flatpak, run as root:\n1  $\u003e luet install apps/flatpak   Once flatpak is installed, from your user add the flathub repo:\n1  user $\u003e flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo   To install Firefox, for example, now you can:\n1  user $\u003e flatpak install org.mozilla.firefox   For a detailed documentation, we suggest as a follow-up reading the official docs, here you can find a short summary of the most used commands.\nSearch Applications can be found in any of the added remotes using the search command. For example:\n1  $ flatpak search gimp   Running applications After an application is installed, can be run by their id:\n1  $\u003e flatpak run org.gimp.GIMP   Updating To update all your installed applications and runtimes to the latest available version in Flatpak, run:\n1  $\u003e flatpak update   Accessing external paths (or storage) from Flatpak apps Flatpak runs applications in sandbox that prevents them to access the host content. You can although add paths that are accessible to a specific Flatpak app.\nFor example, to expose the path /mnt to our org.app.Id:\n1  $\u003e flatpak override --user --filesystem=/mnt org.app.Id   Flatseal is a GUI permissions manager which offer simple point-and-click permissions operations.\nReferences  Flatpak documentation Flathub Give access to flatpak applications bauh - a visual frontend for Flatpak (and others)  ","excerpt":"MocaccinoOS Desktop supports flatpak, and it’s usage is encouraged for …","ref":"/docs/desktop/flatpak/","title":"Flatpak"},{"body":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it’s:\n Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer  We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests.\nStay in touch Join us in slack and hang out with the community! It will be much easier to get started and do your first steps in contributing to the project.\nAll Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests:\n Fork the repo you want to contribute to and create your branch from master. If you’ve added code that should be tested, add tests. If you’ve changed APIs, update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request!  Any contributions you make will be under the Software License of the repository In short, when you submit code changes, your submissions are understood to be under the same License that covers the project. Feel free to contact the maintainers if that’s a concern.\nReport bugs using Github’s issues We use GitHub issues to track public bugs. Report a bug by opening a new issue; it’s that easy!\nWrite bug reports with detail, background, and sample code Try to be as more descriptive as possible. When opening a new issue you will be prompted to choose between a bug or a feature request, with a small template to fill details with. Be specific!\nGreat Bug Reports tend to have:\n A quick summary and/or background Steps to reproduce  Be specific! Give sample code if you can.   What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn’t work)  People love thorough bug reports.\nLicense By contributing, you agree that your contributions will be licensed under the project Licenses.\nReferences This document was adapted from the open-source contribution guidelines from https://gist.github.com/briandk/3d2e8b3ec8daf5a27a62\n","excerpt":"We love your input! We want to make contributing to this project as …","ref":"/docs/contribution-guidelines/","title":"Contributing to MocaccinoOS"},{"body":"Become a donor today.\nIf you want to help us, but you cannot contribute to code, you can still buy us a coffee, or just donate a little bit of your HW power.\nAs a small open source project, know that every dollar will have an immense impact on our ability to continue working towards our mission.\nYour support means the world to us :)\nYou can donate by going to our Patreon page or if you prefer cryptocurrencies, we accepts donations to the following XMR wallet: 84AsfE73Cy7hAYKy7PN8N8D3fh39JzXyLjaiYpgXm3NrJHH7cTPxUJSgsdFiSL6mwE9MKpvrYJQoaTxRG6sJX6aBRpr45dc.\nBecome a Patron!\nDonating computing power If you want, you can also support our project by donating your idle computing power. We have a “donor” profile that you can install/uninstall any time. It will kick-in automatically xmrig when it detects a idle cpu in a range of 15m.\nDonate from Mocaccino Micro Install the following packages:\n1  $ luet install -y runit-srv/xmrig system-profile/donate cryptocurrency/xmrig   done!\nDonate from Mocaccino Desktop Install the following packages:\n1  $ luet install -y systemd-service/xmrig system-profile/donate cryptocurrency/xmrig   done!\nStop the service To stop the service, on Mocaccino Micro:\n1  $ runit-stop xmrig   while on Desktop:\n1  $ systemctl stop xmrig   Uninstall Just remove the installed packages, most importantly system-profile/donate which starts xmrig when the CPU is idling:\n1  $ luet uninstall -y system-profile/donate cryptocurrency/xmrig   Then remove the appropriate service, on Micro:\n1  $ luet uninstall -y runit-srv/xmrig   while on Desktop:\n1  $ luet uninstall -y systemd-service/xmrig   ","excerpt":"Become a donor today.\nIf you want to help us, but you cannot …","ref":"/docs/donate/","title":"Donate"},{"body":"","excerpt":"","ref":"/community/","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu2226c7009d5c201991b3c3f4c09a60eb_1455824_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu2226c7009d5c201991b3c3f4c09a60eb_1455824_1920x1080_fill_q75_catmullrom_top.jpg); } }  MocaccinoOS Learn More   Download   MocaccinoOS is a minimal Linux meta-Distribution for the 21th century! \n        Beyond Gentoo.\nMocaccinoOS uses Luet as Package Manager which is completely static and fully based on containers, and comes with two variants:\n Mocaccino Micro: Musl-based Linux From Scratch using only Luet. Suited for cloud and containers, but more to come as a Desktop flavor. Mocaccino Desktop: Gentoo-based (former Sabayon branch) suited for Desktop environments.        No frills MocaccinoOS uses a layered approach for system and common packages: smoother upgrades so you can focus on the things that really matters.\n   Contributions welcome! MocaccinoOS is a Work in progress, step over by our GitHub Organization. New users are always welcome!\nRead more …\n   Get in touch on Slack! For discussions, announcements, etc.\nRead more …\n     Upgrading is not anymore a nightmare You can just focus on your stable system from now on         Static package manager Versioned rootfs as layers, delivered as upgrades or multiple single packages. You can choose the format you like. Musl? Server variant ? we get you covered\n   Layers Static package manager, your system will always be recoverable!\n   Build your packages Thanks to the Docker-based package manager, building and sharing packages has never been so easy!\n     Customize your experience A declarative suite of tools to set your box in the Cloud or in a Server environment        lxd-compose lxd-compose like docker-compose, but for lxd!\n   simplestreams-builder simplestreams-builder simplifies the process for creating the files and directories tree for exposing LXC/LXD images over simplestreams protocol\n   Declarative user management With entities users and groups in your systems are formally declared and can be carried over system easily\n       Yip yip is a small-footprint distro-agnostic cloud-init style tool. Statically built which executes and sets Linux system configurations.\n   Charty charty is a small-footprint templated test-runner. We use it to run QA checks against our packages!\n   Luet luet is a small-footprint static Golang package manager. It uses SAT and RL approaches to solve package dependencies.\n    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"MocaccinoOS"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"}]